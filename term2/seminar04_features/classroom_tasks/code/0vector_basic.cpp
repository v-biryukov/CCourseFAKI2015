#include <iostream>
#include <vector>

using std::cout;
using std::endl;

// Работа с вектором

int main()
{
	std::vector<int> v = {15, 12, 20, 6, -1, 4};

	// 1) Доступ к элементу:
	// У вектора перегружен operator[], поэтому можно писать так:
	v[1] = 7;  // Какой элемент поменяет эта строка?
	// Что произойдёт, если написать v[8] = 7;? Привидёт ли это к ошибке?

	// Для доступа к элементу с проверкой диапазона нужно использовать метод at:
	v.at(1) = 2;
	// Что произойдёт, если написать v.at(8) = 7;?



	// 2) Добавление элемента в конец вектора:
	v.push_back(17);



	// 3) Итерации по вектору:
	// 3а) Обычный способ (не сработает для других контейнеров, таких как set или map)
	for (int i = 0; i < v.size(); ++i)
		cout << v[i] << " ";
	cout << endl;

	// 3б) Итерации с помощью итераторов:
	for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)
		cout << *it << " ";
	cout << endl;

	// 3с) Итерация с помощью range-based цикла:
	for (int element : v)
		cout << element << " ";
	cout << endl;


	// 4) Конструкторы вектора:
	// Вектор имеет несколько разных конструкторов, которые работают не всегда так, как ожидаешь
	// Проверьте содержимое векторов, созданных ниже
	std::vector<int> va;  // Конструктор по умолчанию
	std::vector<int> vb(5, 7);
	std::vector<int> vc{5, 7};
	std::vector<int> vd(v);
	std::vector<int> ve(v.begin(), v.end());
}