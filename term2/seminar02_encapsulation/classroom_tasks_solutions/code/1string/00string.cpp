#include <iostream>
#include <cstdlib>
using namespace std;

// Создадим класс строки
// Такой чтобы можно было удобно создавать строки, приравнивать, складывать и сравнивать
// Не заботясь о выделении/удалении памяти, и о том, что строка помещается в выделенную память
// (Библиотекой string.h не пользуемся, чтобы наша строка не зависела от старой библиотеки)

// Будем сразу хранить в структуре размер нашей строки (без учёта нулевого символа на конце)
struct String {
	unsigned int size;
	char* data;
};

// Перегруженный оператор << между объектом типа ostream (например cout)
// и нашей структурой
ostream& operator<<(ostream& left, const String& right) {
	left << right.data;
	return left;
}


int main() {
	
	String a = {3, "Cat"};

	char str[] = "Fox";
	String b = {3, str};

	cout << a << endl << b << endl;
	/*
		Этот код вроде работает, но у наших строк a и b есть недостатки
		1) В чём недостаток строки a?

		Строка a хранит указатель на сегмент памяти, доступный только для чтения.
		Поэтому её нельзя изменить, то есть написать так:
		a.data[0] = 'B';


		2) В чём недостаток строки b?

		Строка a хранит указатель на перый символ строки str
		При изменении str изменится и b (и наоборот)
	*/

	str[0] = 'B';
	cout << str << endl;
	cout << b << endl;
}